import { v4 as uuidv4 } from 'uuid';

/****************************************** üò™üò™üò™üò™üò™üò™üò™üò™Design Patterns: Factory Pattern üò™üò™üò™üò™üò™üò™üò™üò™üò™ **************************************/
// üîó https://javascriptpatterns.vercel.app/patterns/design-patterns/factory-pattern

// ‚úÖ With the Factory Pattern, we can use a special function - the factory function - to create many of the same objects

/******************* ‚è∫‚è∫‚è∫ Create Factory Function ‚è∫‚è∫‚è∫ ******************/

const User = (firstName: string, lastName: string, location: string) => ({
  id: uuidv4(),
  name: {
    first: firstName,
    last: lastName,
  },
  location,
});

/******************* ‚è∫‚è∫‚è∫ Consume Factory Function ‚è∫‚è∫‚è∫ ******************/

const user1: ReturnType<typeof User> = User('hermand', 'moh', 'Brazil');
const user2: ReturnType<typeof User> = User('Jack', 'Essam', 'Brazil');
console.log(user1);

/*
	‚ùó‚ùó‚ùó The factory pattern is useful when we have to create multiple objects that share the same properties, 
	without having to repeat the same code over and over. 
	A factory function can easily return a custom object depending on the current environment, or user-specific configuration.
*/
